name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: write
  checks: write
  # needed for marocchino/sticky-pull-request-comment@v2
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Get Package Version
        id: package_version
        shell: pwsh
        run: |
          [xml]$csproj = Get-Content "src/Shimmering.Analyzers/Shimmering.Analyzers.csproj"
          $packageVersion = $csproj.Project.PropertyGroup.PackageVersion
          Write-Host "PackageVersion: $packageVersion"
          echo "version=$packageVersion" >> $env:GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore src

      - name: Build
        run: dotnet build --no-restore src

      - name: Test
        run: dotnet test --no-build src --logger "trx;LogFileName=test_results.trx" --collect:"XPlat Code Coverage"

      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: dotnet tests
          path: src/Shimmering.Analyzers.Tests/TestResults/test_results.trx
          reporter: dotnet-trx

      # Publishing steps only run on push to main, and only on one OS (ubuntu-latest) to avoid duplication
      - name: Pack
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        run: dotnet pack src --output ./artifacts

      - name: Upload NuGet Package
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./artifacts/*.nupkg

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && false # TODO: revert once on stable version
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          body: "Release created automatically via GitHub Actions. Build number: ${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # push the package to NuGet.org in addition to uploading as an artifact.
      - name: Publish to NuGet.org
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        # Regenerate the API at https://www.nuget.org/account/apikeys
        # Add to secrets at https://github.com/Bartleby2718/Shimmering.Analyzers/settings/secrets/actions
        run: dotnet nuget push ./artifacts/*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      # push the package to GitHub Packages in addition to NuGet.org.
      - name: Push to GitHub Packages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        run: dotnet nuget push ./artifacts/*.nupkg --source https://nuget.pkg.github.com/Bartleby2718/index.json --api-key ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Generate Coverage Report
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool || true
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:MarkdownSummary

      - name: Add Coverage PR Comment
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage-report/Summary.md

  # https://docusaurus.io/docs/deployment#triggering-deployment-with-github-actions
  docusaurus:
    name: Build Docusaurus
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: site

      - name: Install dependencies
        run: npm ci
        working-directory: site
      - name: Build website
        run: npm run build
        working-directory: site

      - name: Upload Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/build

  deploy:
    name: Deploy to GitHub Pages
    needs: docusaurus
    if: github.event_name != 'pull_request'

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
